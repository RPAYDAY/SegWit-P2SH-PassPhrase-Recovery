Project: Recover your SegWit-P2SH  Passphrase (24 word Mnemomic)


QUICK START:

(UPDATED: added bash script)Copy your potential 24 word passphrase into file input_passphrases.  Then change directory into segwit-p2sh.  Open generate_keystore_w_correct_address.py; scroll down to address and insert your known BIP49 password (segwit-p2sh - starts with "3").  run ./bash_run.  You may have to updated different dependencies.  You have to delete Possible_Valid_Info_0 from both directories to re-run the script.

Details:


This document attempts to explain the issue, and the convuluted solution that I used to recover my bitcoins after the Ledger Nano S crashed and my passphrase (24 word recovery seed) was incorrect or invalid upon attempts to restore the Nano.  The only information I had was the perceived passphrase (dead sure of 1st and last word) and one received address generated by the Ledger Nano S.  With this information it is possible to recover Passphrase and bitcoinn.

First, I would suggest if your passphrase, as specified above, does not work; first attempt to determine if any of the words are not accetable Mnemomic Words (see https://github.com/bitcoin/bips/blob/master/bip-0039/bip-0039-wordlists.md).  Also look for possible variances that are close to your word(s).  If like me that did not work then maybe this miss mash of coding will help you as it has help me.

I want to thank the following people for what they did to get me to the point where I recovered my $1500 worth of bitcoin. 

Damien Sutevski : http://damien.la/2017/09/10/mnemonic - from this article I created my ruby script: GetMnemonicPhrases.rb.  This script will take the passphase that you wrote down (that is now invalid) and use it to generate possible valid passphrases from the 24 word initial phrase by testing every word in the passphrase against all words specified in the wordlist specified above.  This is written to a file named: "Possible_Valid_Info_0".  For my 24 words it created 185 possible valid passphrases:

Second, thanks to Mario Dian, whose page: https://freedomnode.com/blog/58/generate-bitcoin-wallet-addresses-from-extended-public-key-with-php , allowed me to better understand how the BIP39 requirements affect the derived addresses (I used Ian Coleman's Mnemomic BIP 39 standalone html to do my testing and final validation.

Third, prusnak and IntegersOrK, https://github.com/IntegersOfK/force39/blob/master/mnemonic.py , for creating my program: permutations.py (this takes the passphrase in question and then generate every valid passphrase child utilizing the 24 words in question (this takes care of possible word mix ups)  Note this will take an extremely long time.   I have it generating valid phrase based on the original 1st and last word as the original passphrase for I knew that these were correct.  (I understand this may never complete, if my math is correct this would need to produce 2x10 to the 23rd power (less what ever is reduced by valid and 1st word and last word limits).  These phrases are sent to STDIN and then passed to a file.   These outputs can be added to the last programs input (with modifications to additional text added : see Possible_Valid_Info file format ("#{account_extended_public_key1},#{account_extended_public_key2},#{bip32_private_key},#{bip32_public_key},#{seed_hex},#{passphrase_copy_string}") but would require it to be in the 6th field of the CSV file.

Last, Johnathan Cross, at https://github.com/jonathancross/segwit-p2sh/tree/master/jsonrpclib , whose code I adapted to allow me to create valid keystores based on input from the outputs of  GetMnemonicPhrase-SegWit.rb and permutations.py (as needed).  Taking his Tkinter GUI method and converting it to a continuous loop until found coding.

I want to state up front, there are a lot of better coders out there who understand this much better than I.  With that said if someone modifies this great, if someone needs help recovering their passphrase and it is not being accomplished through this tool, it might require a two or more word correction in your perceived passphrase.  Let me know.

To use code:

Insert 'passphrase' into file "input_passphrases then execute "bash_run. (Note:  each word in passphrase  should be separated by a space.  This will produce file: "Possible_Valid_Info" (do not change this file name unless you do so in the other programs where necessary).  Type "cat Possible_Valid_Info | wc -l" to determine how many possible valid Passphrase were generated by changing one word. 


With this file created, the file,  "Possible_Valid_Infoa, is moved" into the segwit-p2sh subdirectory. Ensure you open "generate_keystore_w_correct_address.py" and goto line where variable "address=" is speciified.  Enter your Segwit address prior to running "bash_run".
  

I generated a random set of 24 words Passphrase with bip39-standalone.html, it is currently the one defined as a variable in GetMnemonicPhrase-SegWit.rb.  It produced 169 potentially valid Passphrases that might be the one I generated then changed a word.  I then copied the two files to segwit-p2sh and ran generate_keystore_w_correct_address.py and it found the correct Passphrase in 1:08 minutes on my old notebook running Ubuntu on a 64gb USB stick.

If this does not work you can take your orginal passphrase and insert it into permutations.py and it will generate a list of passphrases base on possible combinations of your 24 words.   See README.permutations.


If successful, move your bitcoins to another wallet, I would count this passphrase as compromised.
